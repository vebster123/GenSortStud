Почему необходимо использовать класс BufferedStream?
Класс BufferedStream используется для буферизованных потоковых операций чтения и записи (но не той и другой одновременно) в другой поток. Этот класс создает буфер в памяти (по умолчанию размер буфера равен 4 Кбайт, но это значение может быть изменено с помощью перегруженного конструктора), который используется для кэширования данных. В результате повышается производительность операций чтения и записи — за счет сокращения числа обращений к функциям операционной системы.
С целью создания буфера для существующего потока используется конструктор класса BufferedStream, а в качестве входного параметра указывается существующий поток(в данном случае FileStream), тем самым оборачивая (декорируя) его в более эффективную оболочку. . Дальнейшие операции выполняются через методы класса BufferedStream, а все изменения в буфере сохраняются в потоке вызовом метода Flush.

+меньше обращений к памяти
+переопределяет методы Stream, обеспечивая более широкую функциональность
+увеличивает производительность при чтении/записи

-увеличивает код
-при неправильном использовании возможно снижает производительность
-затрудняет отладку

Аналоги: Stream, FileStream, MemoryStream

Почему необходимо использовать алгоритм внешней сортировки?
т.к. мы работаем с большим объемом памяти, может нехватить оперативки для считывания всех данных, нам необходимо последовательно считывать данные из пзу сравнивая их между собой
 